#!/usr/bin/env python

import ConfigParser
import json
import logging
import math
import os
import os.path
import re
import shutil
import signal
import subprocess
from subprocess import Popen
import time
import urlparse
import tempfile

CONFIG_FILE = "/etc/uzblmonitor.conf"
STATE_FILE = '/etc/uzblmonitor-data.json'
BROADCAST_HEIGHT = 100
log = logging.getLogger("uzblmonitor")


def geometry_string(x, y, width, height):
    return '%dx%d+%d+%d' % (width, height, x, y)


def parse_geometry_string(geom_str):
    """Parse a geometry string and return x, y, width, height."""
    width, rest = geom_str.split('x')
    height, x, y = rest.split('+')

    return int(x), int(y), int(width), int(height)


class ViewAdapter(object):

    def __init__(self, state, x, y, width, height):
        self.view = None
        self.geometry_string = geometry_string(x, y, width, height)

        if state['mode'] == 'url':
            self.view = Chrome(*(state['value'].split(' ')))  # hacky way of not having to add a new field to the UI.
        elif state['mode'] == 'terminal':
            self.view = Terminal(state['value'])
        else:
            raise Exception("Unknown mode")

    def start(self, display):
        return Exception("Your provider should implement this")

    def render(self, display):
        if display != 0:
            cmd = ['Xnest', ':%d' % display, '-s', '0,', '-retro', '-geometry', self.geometry_string]
            Popen(cmd, env=dict(os.environ, DISPLAY=":0"))

        Popen(
            ['matchbox-window-manager', '-use_titlebar', 'no'],
            env=dict(os.environ, DISPLAY=":%d" % display)
        )

        # Give the window manager some time to actually start
        time.sleep(0.1)
        self.view.start(display)


class Terminal():

    def __init__(self, cmd):
        self.pid = None
        self.cmd = cmd

    def start(self, display=":0"):
        cmd = ["xterm", "-rv", "-hold", "-e", "bash", "-c", self.cmd]
        self.pid = Popen(
            cmd,
            env=dict(os.environ, DISPLAY=":%s" % display),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )


class Chrome():

    def __init__(self, url, zoom=1.0):
        self.url = url
        self.zoom = zoom

    def start(self, display=":0"):
        log.info("Starting browser on display %s" % display)

        self.should_stop = False

        cmd, env = self.browser_command_env
        print cmd

        self.p = Popen(cmd, env=dict(os.environ, DISPLAY=":%s" % display, **env), stderr=open(os.devnull, 'w'))
        log.info("Started subprocess %d", self.p.pid)

    def stop(self):
        log.info("Stopping browser")

        self.should_stop = True

    def exit(self):
        if self.p:
            self.p.terminate()
            self.p = None

        if self.sock:
            self.sock.close()
            self.sock = None

    def read_config(self):
        config = ConfigParser.RawConfigParser(allow_no_value=True)
        config.read(CONFIG_FILE)
        return config

    def reload_config(self):
        log.info("Reloading config")
        self.exit()
        self.start()

    @property
    def browser_command_env(self):
        config = self.read_config()

        tempdir = tempfile.mkdtemp()
        user_data_dir = os.path.join(tempdir, 'user_data')
        os.mkdir(user_data_dir)
        self.set_zoom(user_data_dir)
        userscript_args = self.load_userscripts(config, tempdir)

        return (
            [
                "/usr/bin/google-chrome-stable",
                "--no-default-browser-check",
                "--no-first-run",
                "--autoplay-policy=no-user-gesture-required",
                "--user-data-dir=%s" % user_data_dir,
                "--app=%s" % insert_basic_auth(self.url),
            ] + userscript_args,
            {}
        )

    def set_zoom(self, user_data_dir):
        prefs_filename = os.path.join(user_data_dir, "Default", "Preferences")
        os.mkdir(os.path.join(user_data_dir, "Default"))
        with open(prefs_filename, "w") as f:
            json.dump(
                {
                    "partition": {
                        "default_zoom_level": {
                            "0": math.log(float(self.zoom)) / math.log(1.20),
                        }
                    }
                },
                f
            )

    def load_userscripts(self, config, tempdir):
        extension_dir = os.path.join(tempdir, "userscripts")
        os.mkdir(extension_dir)
        try:
            script_source = config.get('uzblmonitor', 'user_scripts')
        except ConfigParser.NoOptionError:
            return []

        manifest_data = {
            "manifest_version": 2,
            "name": ("uzblmonitor user scripts"),
            "content_scripts": [],
            "version": "1",
        }

        for filename in os.listdir(script_source):
            source_path = os.path.join(script_source, filename)
            if os.path.isfile(source_path) and filename.endswith(".user.js"):
                userscript_path = os.path.join(extension_dir, filename)
                shutil.copyfile(
                    src=source_path,
                    dst=userscript_path,
                )

                with open(userscript_path) as userscript:
                    metadata = parse_userscript_metadata(userscript)
                manifest_data['content_scripts'].append({
                    "exclude_globs": [],
                    "exclude_matches": [],
                    "include_globs": metadata['include'],
                    "js": [filename],
                    "matches": ["http://*/*", "https://*/*"],
                    "run_at": "document_idle"
                })

        with open(os.path.join(extension_dir, "manifest.json"), 'w') as manifest:
            json.dump(manifest_data, manifest)

        return ["--load-extension=%s" % extension_dir]


def parse_userscript_metadata(f):
    lines = f.readlines()
    if not re.match(r"^// ==UserScript==", lines[0]):
        raise ValueError("user script does not start with `// ==UserScript==`")
    retval = {}
    for line in lines[1:]:
        if re.match(r"// ==/UserScript==", line):
            break
        match = re.match(r"// @(\S+)\s+(.*)", line)
        retval.setdefault(match.group(1), []).append(match.group(2))

    return retval


def insert_basic_auth(url, filename="/etc/uzblmonitor-auth.json"):
    try:
        with open(filename) as f:
            auth_dict = json.load(f)
    except IOError as e:
        log.warning("Caught %s when trying to look up basic auth credentials from %s -- ignoring" % (e, filename))
        return url

    parsed = list(urlparse.urlsplit(url))
    hostname = parsed[1]

    for entry in auth_dict['entries']:
        if hostname == entry['domain']:
            parsed[1] = '%s:%s@%s' % (entry['username'], entry['password'], parsed[1])
            return urlparse.urlunsplit(parsed)

    return url


def set_up_signal_handlers(browser):
    def signal_exit(sig, _):
        log.info("Got signal %d, exiting.", sig)
        browser.stop()

    def signal_reload_config(sig, _):
        log.info("Got signal %d, reloading config.", sig)
        browser.reload_config()

    log.debug("Setting up signal handlers")

    signal.signal(signal.SIGINT, signal_exit)
    signal.signal(signal.SIGTERM, signal_exit)
    signal.signal(signal.SIGHUP, signal_reload_config)


def parse_layout(views, state, x, y, width, height, broadcast=None):

    if broadcast:
        safe_broadcast = shellquote(broadcast)
        views.append(ViewAdapter(state={'mode': 'terminal', 'value': 'DISPLAY=:0 textscroll {0}'.format(safe_broadcast)}, x=0, y=0, width=width, height=BROADCAST_HEIGHT))

    if state['mode'] == 'horizontal':
        x_offset = int(float(state['value'])*width)
        parse_layout(views, state['children'][0], x, y, x_offset, height)
        parse_layout(views, state['children'][1], x+x_offset, y, width-x_offset, height)
    elif state['mode'] == 'vertical':
        y_offset = int(float(state['value'])*height)
        parse_layout(views, state['children'][0], x, y, width, y_offset)
        parse_layout(views, state['children'][1], x, y+y_offset, width, height-y_offset)
    else:
        views.append(ViewAdapter(state, x, y, width, height))

def get_emergency_broadcast(broadcast_file='/etc/uzblmonitor-broadcast.json'):
    with open(broadcast_file) as f:
        broadcast = f.read().strip()
    return broadcast

def shellquote(s):
    return "'" + s.replace("'", "'\\''") + "'"


def main():
    logging.basicConfig(level=logging.DEBUG)

    with open(STATE_FILE) as f:
        state = json.loads(f.read())

    views = []

    xwininfo_output = subprocess.check_output(['xwininfo', '-root'])
    (geom_str,) = [l.split(' ')[-1] for l in xwininfo_output.split('\n') if '-geometry ' in l]
    x, y, width, height = parse_geometry_string(geom_str)

    broadcast = get_emergency_broadcast()
    if broadcast:
        y += BROADCAST_HEIGHT
        height -= BROADCAST_HEIGHT

    parse_layout(views, state, x, y, width, height, broadcast)
    display = 0
    for view in views:
        # If there is no split, we don't need nested X server and can enable fullscreen GPU OpenGL support
        if len(views) != 1 or broadcast:
            display += 11
        view.render(display)

    while True:
        time.sleep(5)

if __name__ == '__main__':
    main()
